{
  "openapi": "3.1.0",
  "info": {
    "title": "Substrate API",
    "version": "2024-02-01",
    "contact": {
      "email": "support@substrate.run"
    },
    "description": "Substrate API"
  },
  "servers": [
    {
      "url": "https://api.substrate.run",
      "description": "Substrate API"
    }
  ],
  "components": {
    "schemas": {
      "ErrorOut": {
        "title": "ErrorOut",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "api_error",
              "invalid_request_error"
            ],
            "description": "The type of error returned."
          },
          "message": {
            "type": "string",
            "description": "A message providing more details about the error."
          }
        },
        "required": [
          "type",
          "message"
        ]
      },
      "ResponseFormat": {
        "title": "ResponseFormat",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "json_object",
              "text"
            ],
            "description": "Type of response.",
            "default": "text"
          },
          "json_schema": {
            "type": "object",
            "description": "JSON schema to guide `json_object` response."
          }
        },
        "required": [
          "type"
        ]
      },
      "GenerateTextIn": {
        "title": "GenerateTextIn",
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Input prompt."
          },
          "model": {
            "type": "string",
            "enum": [
              "mistral-7b-instruct"
            ],
            "description": "Selected model.",
            "default": "mistral-7b-instruct"
          },
          "response_format": {
            "title": "ResponseFormat",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "json_object",
                  "text"
                ],
                "description": "Type of response.",
                "default": "text"
              },
              "json_schema": {
                "type": "object",
                "description": "JSON schema to guide `json_object` response."
              }
            },
            "required": [
              "type"
            ]
          },
          "temperature": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "default": 4,
            "description": "Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic."
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate.",
            "default": 800
          }
        },
        "required": [
          "prompt"
        ]
      },
      "MultiGenerateTextIn": {
        "title": "MultiGenerateTextIn",
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Input prompt."
          },
          "num_choices": {
            "type": "integer",
            "description": "Number of choices to generate."
          },
          "model": {
            "type": "string",
            "enum": [
              "mistral-7b-instruct"
            ],
            "description": "Selected model.",
            "default": "mistral-7b-instruct"
          },
          "response_format": {
            "title": "ResponseFormat",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "json_object",
                  "text"
                ],
                "description": "Type of response.",
                "default": "text"
              },
              "json_schema": {
                "type": "object",
                "description": "JSON schema to guide `json_object` response."
              }
            },
            "required": [
              "type"
            ]
          },
          "temperature": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "default": 4,
            "description": "Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic."
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate.",
            "default": 800
          }
        },
        "required": [
          "prompt",
          "num_choices"
        ]
      },
      "GenerateTextOut": {
        "title": "GenerateTextOut",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text response."
          },
          "json_object": {
            "type": "object",
            "description": "JSON response."
          }
        }
      },
      "MultiGenerateTextOut": {
        "title": "MultiGenerateTextOut",
        "type": "object",
        "properties": {
          "choices": {
            "type": "array",
            "items": {
              "title": "GenerateTextOut",
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Text response."
                },
                "json_object": {
                  "type": "object",
                  "description": "JSON response."
                }
              }
            }
          }
        },
        "required": [
          "choices"
        ]
      },
      "GenerateTextVisionIn": {
        "title": "GenerateTextVisionIn",
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Text prompt."
          },
          "image_uris": {
            "description": "Image prompts.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "model": {
            "type": "string",
            "enum": [
              "firellava-13b"
            ],
            "description": "Selected model.",
            "default": "firellava-13b"
          },
          "temperature": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "default": 4,
            "description": "Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic."
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate.",
            "default": 800
          }
        },
        "required": [
          "prompt",
          "image_uri"
        ]
      },
      "GenerateTextVisionOut": {
        "title": "GenerateTextVisionOut",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text response."
          }
        },
        "required": [
          "text"
        ]
      },
      "GenerateImageIn": {
        "title": "GenerateImageIn",
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Input prompt."
          },
          "model": {
            "type": "string",
            "enum": [
              "stablediffusion-xl",
              "stablediffusion-1.5"
            ],
            "description": "Selected model.",
            "default": "stablediffusion-xl"
          },
          "negative_prompt": {
            "type": "string",
            "description": "Negative input prompt."
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          },
          "width": {
            "type": "integer",
            "description": "Width of output image, in pixels."
          },
          "height": {
            "type": "integer",
            "description": "Height of output image, in pixels."
          },
          "refinement": {
            "type": "number",
            "format": "float",
            "description": "Controls how long to run the image refinement process.",
            "minimum": 0,
            "maximum": 10,
            "default": 6
          },
          "prompt_influence": {
            "type": "number",
            "format": "float",
            "description": "Controls the influence of the input prompt on the generated output.",
            "minimum": 0,
            "maximum": 10,
            "default": 2
          },
          "seed": {
            "type": "integer",
            "description": "Seed for deterministic generation. Default is a random seed."
          }
        },
        "required": [
          "prompt"
        ]
      },
      "GenerateImageOut": {
        "title": "GenerateImageOut",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
          },
          "seed": {
            "type": "integer",
            "description": "The random noise seed used for generation."
          }
        },
        "required": [
          "image_uri",
          "seed"
        ]
      },
      "MultiGenerateImageIn": {
        "title": "MultiGenerateImageIn",
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Input prompt."
          },
          "num_images": {
            "type": "integer",
            "description": "Number of images to generate."
          },
          "model": {
            "type": "string",
            "enum": [
              "stablediffusion-xl",
              "stablediffusion-1.5"
            ],
            "description": "Selected model.",
            "default": "stablediffusion-xl"
          },
          "negative_prompt": {
            "type": "string",
            "description": "Negative input prompt."
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          },
          "width": {
            "type": "integer",
            "description": "Width of output image, in pixels."
          },
          "height": {
            "type": "integer",
            "description": "Height of output image, in pixels."
          },
          "refinement": {
            "type": "number",
            "format": "float",
            "description": "Controls how long to run the image refinement process.",
            "minimum": 0,
            "maximum": 10,
            "default": 6
          },
          "prompt_influence": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 10,
            "description": "Controls the influence of the input prompt on the generated output."
          },
          "seeds": {
            "description": "Random noise seeds. Default is random seeds for each generation.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "prompt",
          "num_images"
        ]
      },
      "MultiGenerateImageOut": {
        "title": "MultiGenerateImageOut",
        "type": "object",
        "properties": {
          "outputs": {
            "type": "array",
            "items": {
              "title": "GenerateImageOut",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                },
                "seed": {
                  "type": "integer",
                  "description": "The random noise seed used for generation."
                }
              },
              "required": [
                "image_uri",
                "seed"
              ]
            }
          }
        },
        "required": [
          "outputs"
        ]
      },
      "ControlledGenerateImageIn": {
        "title": "ControlledGenerateImageIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Input image."
          },
          "control_method": {
            "type": "string",
            "enum": [
              "edge",
              "upscale",
              "depth",
              "qr"
            ],
            "description": "Strategy to control generation using the input image."
          },
          "prompt": {
            "type": "string",
            "description": "Input prompt."
          },
          "output_resolution": {
            "type": "integer",
            "description": "Resolution of the output image, in pixels.",
            "default": 1024
          },
          "model": {
            "type": "string",
            "enum": [
              "stablediffusion-1.5",
              "stablediffusion-xl"
            ],
            "description": "Selected model.",
            "default": "stablediffusion-xl"
          },
          "negative_prompt": {
            "type": "string",
            "description": "Negative input prompt."
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          },
          "refinement": {
            "type": "number",
            "format": "float",
            "description": "Controls how long to run the image refinement process.",
            "minimum": 0,
            "maximum": 10,
            "default": 6
          },
          "image_influence": {
            "type": "number",
            "format": "float",
            "description": "Controls the influence of the input image on the generated output.",
            "minimum": 0,
            "maximum": 10,
            "default": 9
          },
          "prompt_influence": {
            "type": "number",
            "format": "float",
            "description": "Controls the influence of the input prompt on the generated output.",
            "minimum": 0,
            "maximum": 10,
            "default": 2
          },
          "seed": {
            "type": "integer",
            "description": "Seed for deterministic generation. Default is a random seed."
          }
        },
        "required": [
          "image_uri",
          "control_method",
          "prompt"
        ]
      },
      "ControlledGenerateImageOut": {
        "title": "ControlledGenerateImageOut",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
          },
          "seed": {
            "type": "integer",
            "description": "The random noise seed used for generation."
          }
        },
        "required": [
          "image_uri",
          "seed"
        ]
      },
      "MultiControlledGenerateImageIn": {
        "title": "MultiControlledGenerateImageIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Input image."
          },
          "control_method": {
            "type": "string",
            "enum": [
              "edge",
              "upscale",
              "depth",
              "qr"
            ],
            "description": "Strategy to control generation using the input image."
          },
          "prompt": {
            "type": "string",
            "description": "Input prompt."
          },
          "num_images": {
            "type": "integer",
            "description": "Number of images to generate."
          },
          "output_resolution": {
            "type": "integer",
            "description": "Resolution of the output image, in pixels.",
            "default": 1024
          },
          "model": {
            "type": "string",
            "enum": [
              "stablediffusion-1.5"
            ],
            "description": "Selected model.",
            "default": "stablediffusion-1.5"
          },
          "negative_prompt": {
            "type": "string",
            "description": "Negative input prompt."
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          },
          "refinement": {
            "type": "number",
            "format": "float",
            "description": "Controls how long to run the image refinement process.",
            "minimum": 0,
            "maximum": 10,
            "default": 6
          },
          "image_influence": {
            "type": "number",
            "format": "float",
            "description": "Controls the influence of the input image on the generated output.",
            "minimum": 0,
            "maximum": 10,
            "default": 9
          },
          "prompt_influence": {
            "type": "number",
            "format": "float",
            "description": "Controls the influence of the input prompt on the generated output.",
            "minimum": 0,
            "maximum": 10,
            "default": 2
          },
          "seeds": {
            "description": "Random noise seeds. Default is random seeds for each generation.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "image_uri",
          "control_method",
          "prompt",
          "num_images"
        ]
      },
      "MultiControlledGenerateImageOut": {
        "title": "MultiControlledGenerateImageOut",
        "type": "object",
        "properties": {
          "outputs": {
            "type": "array",
            "items": {
              "title": "ControlledGenerateImageOut",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                },
                "seed": {
                  "type": "integer",
                  "description": "The random noise seed used for generation."
                }
              },
              "required": [
                "image_uri",
                "seed"
              ]
            }
          }
        },
        "required": [
          "outputs"
        ]
      },
      "GenerativeEditImageIn": {
        "title": "GenerativeEditImageIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Input image."
          },
          "mask_image_uri": {
            "type": "string",
            "description": "Mask image that controls which pixels are inpainted. If unset, the entire image is edited (image-to-image)."
          },
          "prompt": {
            "type": "string",
            "description": "Input prompt."
          },
          "output_resolution": {
            "type": "integer",
            "description": "Resolution of the output image, in pixels.",
            "default": 1024
          },
          "model": {
            "type": "string",
            "enum": [
              "stablediffusion-xl"
            ],
            "description": "Selected model.",
            "default": "stablediffusion-xl"
          },
          "negative_prompt": {
            "type": "string",
            "description": "Negative input prompt."
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          },
          "refinement": {
            "type": "number",
            "format": "float",
            "description": "Controls how long to run the image refinement process.",
            "minimum": 0,
            "maximum": 10,
            "default": 6
          },
          "prompt_influence": {
            "type": "number",
            "format": "float",
            "description": "Controls the influence of the input prompt on the generated output.",
            "minimum": 0,
            "maximum": 10,
            "default": 5
          },
          "seed": {
            "type": "integer",
            "description": "Seed for deterministic generation. Default is a random seed."
          }
        },
        "required": [
          "image_uri",
          "prompt"
        ]
      },
      "GenerativeEditImageOut": {
        "title": "GenerativeEditImageOut",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
          },
          "seed": {
            "type": "integer",
            "description": "The random noise seed used for generation."
          }
        },
        "required": [
          "image_uri",
          "seed"
        ]
      },
      "MultiGenerativeEditImageIn": {
        "title": "MultiGenerativeEditImageIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Input image."
          },
          "mask_image_uri": {
            "type": "string",
            "description": "Mask image that controls which pixels are edited (inpainting). If unset, the entire image is edited (image-to-image)."
          },
          "prompt": {
            "type": "string",
            "description": "Input prompt."
          },
          "num_images": {
            "type": "integer",
            "description": "Number of images to generate."
          },
          "output_resolution": {
            "type": "integer",
            "description": "Resolution of the output image, in pixels.",
            "default": 1024
          },
          "model": {
            "type": "string",
            "enum": [
              "stablediffusion-1.5"
            ],
            "description": "Selected model.",
            "default": "stablediffusion-1.5"
          },
          "negative_prompt": {
            "type": "string",
            "description": "Negative input prompt."
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          },
          "refinement": {
            "type": "number",
            "format": "float",
            "description": "Controls how long to run the image refinement process.",
            "minimum": 0,
            "maximum": 10,
            "default": 6
          },
          "image_influence": {
            "type": "number",
            "format": "float",
            "description": "Controls the influence of the input image on the generated output.",
            "minimum": 0,
            "maximum": 10,
            "default": 9
          },
          "prompt_influence": {
            "type": "number",
            "format": "float",
            "description": "Controls the influence of the input prompt on the generated output.",
            "minimum": 0,
            "maximum": 10,
            "default": 2
          },
          "seeds": {
            "description": "Random noise seeds. Default is random seeds for each generation.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "image_uri",
          "prompt",
          "num_images"
        ]
      },
      "MultiGenerativeEditImageOut": {
        "title": "MultiGenerativeEditImageOut",
        "type": "object",
        "properties": {
          "outputs": {
            "type": "array",
            "items": {
              "title": "GenerativeEditImageOut",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                },
                "seed": {
                  "type": "integer",
                  "description": "The random noise seed used for generation."
                }
              },
              "required": [
                "image_uri",
                "seed"
              ]
            }
          }
        },
        "required": [
          "outputs"
        ]
      },
      "BoundingBox": {
        "title": "BoundingBox",
        "type": "object",
        "properties": {
          "x1": {
            "type": "number",
            "format": "float",
            "description": "Top left corner x."
          },
          "y1": {
            "type": "number",
            "format": "float",
            "description": "Top left corner y."
          },
          "x2": {
            "type": "number",
            "format": "float",
            "description": "Bottom right corner x."
          },
          "y2": {
            "type": "number",
            "format": "float",
            "description": "Bottom right corner y."
          }
        },
        "required": [
          "x1",
          "y1",
          "x2",
          "y2"
        ]
      },
      "Point": {
        "title": "Point",
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "description": "X position."
          },
          "y": {
            "type": "integer",
            "description": "Y position."
          }
        },
        "required": [
          "x",
          "y"
        ]
      },
      "FillMaskIn": {
        "title": "FillMaskIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Input image."
          },
          "mask_image_uri": {
            "type": "string",
            "description": "Mask image that controls which pixels are inpainted."
          },
          "model": {
            "type": "string",
            "enum": [
              "big-lama"
            ],
            "description": "Selected model.",
            "default": "big-lama"
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          }
        },
        "required": [
          "image_uri",
          "mask_image_uri"
        ]
      },
      "FillMaskOut": {
        "title": "FillMaskOut",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
          }
        },
        "required": [
          "image_uri"
        ]
      },
      "RemoveBackgroundIn": {
        "title": "RemoveBackgroundIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Input image."
          },
          "return_mask": {
            "type": "boolean",
            "description": "Return a mask image instead of the original content."
          },
          "background_color": {
            "type": "string",
            "description": "Hex value background color. Transparent if unset."
          },
          "model": {
            "type": "string",
            "enum": [
              "isnet"
            ],
            "description": "Selected model.",
            "default": "isnet"
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          }
        },
        "required": [
          "image_uri"
        ]
      },
      "RemoveBackgroundOut": {
        "title": "RemoveBackgroundOut",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
          }
        },
        "required": [
          "image_uri"
        ]
      },
      "UpscaleImageIn": {
        "title": "UpscaleImageIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Input image."
          },
          "model": {
            "type": "string",
            "enum": [
              "real-esrgan-x4"
            ],
            "description": "Selected model.",
            "default": "real-esrgan-x4"
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          }
        },
        "required": [
          "image_uri"
        ]
      },
      "UpscaleImageOut": {
        "title": "UpscaleImageOut",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
          }
        },
        "required": [
          "image_uri"
        ]
      },
      "DetectSegmentIn": {
        "title": "DetectSegmentIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Input image."
          },
          "point_prompt": {
            "title": "Point",
            "type": "object",
            "properties": {
              "x": {
                "type": "integer",
                "description": "X position."
              },
              "y": {
                "type": "integer",
                "description": "Y position."
              }
            },
            "required": [
              "x",
              "y"
            ]
          },
          "box_prompt": {
            "title": "BoundingBox",
            "type": "object",
            "properties": {
              "x1": {
                "type": "number",
                "format": "float",
                "description": "Top left corner x."
              },
              "y1": {
                "type": "number",
                "format": "float",
                "description": "Top left corner y."
              },
              "x2": {
                "type": "number",
                "format": "float",
                "description": "Bottom right corner x."
              },
              "y2": {
                "type": "number",
                "format": "float",
                "description": "Bottom right corner y."
              }
            },
            "required": [
              "x1",
              "y1",
              "x2",
              "y2"
            ]
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
          }
        },
        "required": [
          "image_uri"
        ]
      },
      "DetectSegmentOut": {
        "title": "DetectSegmentOut",
        "type": "object",
        "properties": {
          "mask_image_uri": {
            "type": "string",
            "description": "Detected segment in 'mask image' format. Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
          }
        },
        "required": [
          "box",
          "path"
        ]
      },
      "TranscribeMediaIn": {
        "title": "TranscribeMediaIn",
        "type": "object",
        "properties": {
          "audio_uri": {
            "type": "string",
            "description": "Input audio."
          },
          "prompt": {
            "type": "string",
            "description": "Prompt to guide model on the content and context of input audio."
          },
          "language": {
            "type": "string",
            "default": "en",
            "description": "Language of input audio in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format."
          },
          "segment": {
            "type": "boolean",
            "default": false,
            "description": "Segment the text into sentences with approximate timestamps."
          },
          "align": {
            "type": "boolean",
            "default": false,
            "description": "Align transcription to produce more accurate sentence-level timestamps and word-level timestamps. An array of word segments will be included in each sentence segment."
          },
          "diarize": {
            "type": "boolean",
            "default": false,
            "description": "Identify speakers for each segment. Speaker IDs will be included in each segment."
          },
          "suggest_chapters": {
            "type": "boolean",
            "default": false,
            "description": "Suggest automatic chapter markers."
          }
        },
        "required": [
          "audio_uri"
        ]
      },
      "TranscribedWord": {
        "title": "TranscribedWord",
        "type": "object",
        "properties": {
          "word": {
            "type": "string",
            "description": "Text of word."
          },
          "start": {
            "type": "number",
            "format": "float",
            "description": "Start time of word, in seconds."
          },
          "end": {
            "type": "number",
            "format": "float",
            "description": "End time of word, in seconds."
          },
          "speaker": {
            "type": "string",
            "description": "ID of speaker, if `diarize` is enabled."
          }
        },
        "required": [
          "word"
        ]
      },
      "TranscribedSegment": {
        "title": "TranscribedSegment",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text of segment."
          },
          "start": {
            "type": "number",
            "format": "float",
            "description": "Start time of segment, in seconds."
          },
          "end": {
            "type": "number",
            "format": "float",
            "description": "End time of segment, in seconds."
          },
          "speaker": {
            "type": "string",
            "description": "ID of speaker, if `diarize` is enabled."
          },
          "words": {
            "type": "array",
            "description": "Aligned words, if `align` is enabled.",
            "items": {
              "title": "TranscribedWord",
              "type": "object",
              "properties": {
                "word": {
                  "type": "string",
                  "description": "Text of word."
                },
                "start": {
                  "type": "number",
                  "format": "float",
                  "description": "Start time of word, in seconds."
                },
                "end": {
                  "type": "number",
                  "format": "float",
                  "description": "End time of word, in seconds."
                },
                "speaker": {
                  "type": "string",
                  "description": "ID of speaker, if `diarize` is enabled."
                }
              },
              "required": [
                "word"
              ]
            }
          }
        },
        "required": [
          "text",
          "start",
          "end"
        ]
      },
      "ChapterMarker": {
        "title": "ChapterMarker",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Chapter title."
          },
          "start": {
            "type": "number",
            "format": "float",
            "description": "Start time of chapter, in seconds."
          }
        },
        "required": [
          "title",
          "start"
        ]
      },
      "TranscribeMediaOut": {
        "title": "TranscribeMediaOut",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Transcribed text."
          },
          "segments": {
            "type": "array",
            "description": "Transcribed segments, if `segment` is enabled.",
            "items": {
              "title": "TranscribedSegment",
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Text of segment."
                },
                "start": {
                  "type": "number",
                  "format": "float",
                  "description": "Start time of segment, in seconds."
                },
                "end": {
                  "type": "number",
                  "format": "float",
                  "description": "End time of segment, in seconds."
                },
                "speaker": {
                  "type": "string",
                  "description": "ID of speaker, if `diarize` is enabled."
                },
                "words": {
                  "type": "array",
                  "description": "Aligned words, if `align` is enabled.",
                  "items": {
                    "title": "TranscribedWord",
                    "type": "object",
                    "properties": {
                      "word": {
                        "type": "string",
                        "description": "Text of word."
                      },
                      "start": {
                        "type": "number",
                        "format": "float",
                        "description": "Start time of word, in seconds."
                      },
                      "end": {
                        "type": "number",
                        "format": "float",
                        "description": "End time of word, in seconds."
                      },
                      "speaker": {
                        "type": "string",
                        "description": "ID of speaker, if `diarize` is enabled."
                      }
                    },
                    "required": [
                      "word"
                    ]
                  }
                }
              },
              "required": [
                "text",
                "start",
                "end"
              ]
            }
          },
          "chapters": {
            "type": "array",
            "description": "Chapter markers, if `suggest_chapters` is enabled.",
            "items": {
              "title": "ChapterMarker",
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Chapter title."
                },
                "start": {
                  "type": "number",
                  "format": "float",
                  "description": "Start time of chapter, in seconds."
                }
              },
              "required": [
                "title",
                "start"
              ]
            }
          }
        },
        "required": [
          "text"
        ]
      },
      "GenerateSpeechIn": {
        "title": "GenerateSpeechIn",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Input text."
          },
          "audio_uri": {
            "type": "string",
            "description": "Reference audio used to synthesize the speaker. If unset, a default speaker voice will be used."
          },
          "language": {
            "type": "string",
            "default": "en",
            "description": "Language of input text. Supported languages: `en, de, fr, es, it, pt, pl, zh, ar, cs, ru, nl, tr, hu, ko`."
          },
          "store": {
            "type": "string",
            "description": "Use \"hosted\" to return an audio URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the audio data will be returned as a base64-encoded string."
          }
        },
        "required": [
          "text"
        ]
      },
      "GenerateSpeechOut": {
        "title": "GenerateSpeechOut",
        "type": "object",
        "properties": {
          "audio_uri": {
            "type": "string",
            "description": "Base 64-encoded WAV audio bytes, or a hosted audio url if `store` is provided."
          }
        },
        "required": [
          "audio_uri"
        ]
      },
      "Embedding": {
        "title": "Embedding",
        "type": "object",
        "properties": {
          "vector": {
            "type": "string",
            "description": "Embedding vector.",
            "items": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "required": [
          "vector"
        ]
      },
      "EmbedTextIn": {
        "title": "EmbedTextIn",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text to embed."
          },
          "model": {
            "type": "string",
            "enum": [
              "jina-v2",
              "clip"
            ],
            "description": "Selected model.",
            "default": "jina-v2"
          },
          "store": {
            "type": "string",
            "description": "[Vector store](/docs/vector-stores) identifier."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata that can be used to query the vector store. Ignored if `store` is unset."
          },
          "embedded_metadata": {
            "type": "object",
            "properties": {
              "include_keys": {
                "type": "array",
                "description": "Keys to embed with text.",
                "items": {
                  "type": "string"
                }
              },
              "exclude_keys": {
                "type": "array",
                "description": "Keys to exclude. All other keys will be embedded with text.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "text"
        ]
      },
      "EmbedTextOut": {
        "title": "EmbedTextOut",
        "type": "object",
        "properties": {
          "embedding": {
            "title": "Embedding",
            "type": "object",
            "properties": {
              "vector": {
                "type": "string",
                "description": "Embedding vector.",
                "items": {
                  "type": "number",
                  "format": "float"
                }
              }
            },
            "required": [
              "vector"
            ]
          }
        },
        "required": [
          "embedding"
        ]
      },
      "EmbedTextItem": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text to embed."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata that can be used to query the vector store. Ignored if `store` is unset."
          }
        },
        "required": [
          "text"
        ]
      },
      "MultiEmbedTextIn": {
        "title": "MultiEmbedTextIn",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "Items to embed.",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Text to embed."
                },
                "metadata": {
                  "type": "object",
                  "description": "Metadata that can be used to query the vector store. Ignored if `store` is unset."
                }
              },
              "required": [
                "text"
              ]
            }
          },
          "model": {
            "type": "string",
            "enum": [
              "jina-v2",
              "clip"
            ],
            "description": "Selected model.",
            "default": "jina-v2"
          },
          "store": {
            "type": "string",
            "description": "[Vector store](/docs/vector-stores) identifier."
          },
          "embedded_metadata": {
            "type": "object",
            "properties": {
              "include_keys": {
                "type": "array",
                "description": "Keys to embed with text.",
                "items": {
                  "type": "string"
                }
              },
              "exclude_keys": {
                "type": "array",
                "description": "Keys to exclude. All other keys will be embedded with text.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "MultiEmbedTextOut": {
        "title": "MultiEmbedTextOut",
        "type": "object",
        "properties": {
          "embeddings": {
            "type": "array",
            "description": "Generated embeddings.",
            "items": {
              "title": "Embedding",
              "type": "object",
              "properties": {
                "vector": {
                  "type": "string",
                  "description": "Embedding vector.",
                  "items": {
                    "type": "number",
                    "format": "float"
                  }
                }
              },
              "required": [
                "vector"
              ]
            }
          }
        },
        "required": [
          "embeddings"
        ]
      },
      "EmbeddedMetadataSelect": {
        "type": "object",
        "properties": {
          "include_keys": {
            "type": "array",
            "description": "Keys to embed with text.",
            "items": {
              "type": "string"
            }
          },
          "exclude_keys": {
            "type": "array",
            "description": "Keys to exclude. All other keys will be embedded with text.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EmbedImageIn": {
        "title": "EmbedImageIn",
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Image to embed."
          },
          "model": {
            "type": "string",
            "enum": [
              "clip"
            ],
            "description": "Selected model.",
            "default": "clip"
          },
          "store": {
            "type": "string",
            "description": "[Vector store](/docs/vector-stores) identifier."
          }
        },
        "required": [
          "image_uri"
        ]
      },
      "EmbedImageOut": {
        "title": "EmbedImageOut",
        "type": "object",
        "properties": {
          "embedding": {
            "title": "Embedding",
            "type": "object",
            "properties": {
              "vector": {
                "type": "string",
                "description": "Embedding vector.",
                "items": {
                  "type": "number",
                  "format": "float"
                }
              }
            },
            "required": [
              "vector"
            ]
          }
        },
        "required": [
          "embedding"
        ]
      },
      "EmbedImageItem": {
        "type": "object",
        "properties": {
          "image_uri": {
            "type": "string",
            "description": "Image to embed."
          }
        },
        "required": [
          "image_uri"
        ]
      },
      "MultiEmbedImageIn": {
        "title": "MultiEmbedImageIn",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "Items to embed.",
            "items": {
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Image to embed."
                }
              },
              "required": [
                "image_uri"
              ]
            }
          },
          "store": {
            "type": "string",
            "description": "[Vector store](/docs/vector-stores) identifier."
          },
          "model": {
            "type": "string",
            "enum": [
              "clip"
            ],
            "description": "Selected model.",
            "default": "clip"
          }
        },
        "required": [
          "items"
        ]
      },
      "MultiEmbedImageOut": {
        "title": "MultiEmbedImageOut",
        "type": "object",
        "properties": {
          "embeddings": {
            "type": "array",
            "description": "Generated embeddings.",
            "items": {
              "title": "Embedding",
              "type": "object",
              "properties": {
                "vector": {
                  "type": "string",
                  "description": "Embedding vector.",
                  "items": {
                    "type": "number",
                    "format": "float"
                  }
                }
              },
              "required": [
                "vector"
              ]
            }
          }
        },
        "required": [
          "embeddings"
        ]
      },
      "VectorStoreParams": {
        "title": "VectorStoreParams",
        "description": "Fields describing a vector store and its associated index.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Vector store name.",
            "minLength": 1,
            "maxLength": 63
          },
          "model": {
            "type": "string",
            "description": "Selected embedding model",
            "enum": [
              "jina-v2",
              "clip"
            ]
          },
          "m": {
            "type": "integer",
            "minimum": 1,
            "maximum": 64,
            "default": 16,
            "description": "The max number of connections per layer for the index."
          },
          "ef_construction": {
            "type": "integer",
            "minimum": 1,
            "maximum": 128,
            "description": "The size of the dynamic candidate list for constructing the index graph.",
            "default": 64
          },
          "metric": {
            "type": "string",
            "enum": [
              "cosine",
              "l2",
              "inner"
            ],
            "default": "inner",
            "description": "The distance metric to construct the index with."
          }
        },
        "required": [
          "name",
          "model"
        ]
      },
      "DeleteVectorStoreParams": {
        "title": "DeleteVectorStoreParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Vector store name."
          },
          "model": {
            "type": "string",
            "description": "Selected embedding model",
            "enum": [
              "jina-v2",
              "clip"
            ]
          }
        },
        "required": [
          "name",
          "model"
        ]
      },
      "Vector": {
        "title": "Vector",
        "type": "object",
        "description": "Canonical representation of document with embedding vector.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID."
          },
          "vector": {
            "type": "array",
            "description": "Embedding vector.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Document metadata.",
            "default": {}
          }
        },
        "required": [
          "id",
          "vector",
          "metadata"
        ]
      },
      "GetVectorsParams": {
        "title": "GetVectorsParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Vector store name."
          },
          "model": {
            "type": "string",
            "description": "Selected embedding model",
            "enum": [
              "jina-v2",
              "clip"
            ]
          },
          "ids": {
            "type": "array",
            "description": "Document IDs to retrieve.",
            "items": {
              "type": "string"
            },
            "maxItems": 100
          }
        },
        "required": [
          "name",
          "model",
          "ids"
        ]
      },
      "GetVectorsResponse": {
        "title": "GetVectorsResponse",
        "type": "object",
        "properties": {
          "vectors": {
            "type": "array",
            "description": "Retrieved vectors.",
            "items": {
              "title": "Vector",
              "type": "object",
              "description": "Canonical representation of document with embedding vector.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Document ID."
                },
                "vector": {
                  "type": "array",
                  "description": "Embedding vector.",
                  "items": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "metadata": {
                  "type": "object",
                  "description": "Document metadata.",
                  "default": {}
                }
              },
              "required": [
                "id",
                "vector",
                "metadata"
              ]
            }
          }
        },
        "required": [
          "vectors"
        ]
      },
      "VectorUpdateCountResponse": {
        "title": "VectorUpdateCountResponse",
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of vectors modified."
          }
        },
        "required": [
          "count"
        ]
      },
      "UpdateVectorParams": {
        "title": "UpdateVectorParams",
        "description": "Document to update.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID."
          },
          "vector": {
            "type": "array",
            "description": "Embedding vector.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Document metadata.",
            "default": {}
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateVectorsParams": {
        "title": "UpdateVectorsParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Vector store name."
          },
          "model": {
            "type": "string",
            "description": "Selected embedding model",
            "enum": [
              "jina-v2",
              "clip"
            ]
          },
          "vectors": {
            "type": "array",
            "description": "Vectors to upsert.",
            "items": {
              "title": "UpdateVectorParams",
              "description": "Document to update.",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Document ID."
                },
                "vector": {
                  "type": "array",
                  "description": "Embedding vector.",
                  "items": {
                    "type": "number",
                    "format": "float"
                  }
                },
                "metadata": {
                  "type": "object",
                  "description": "Document metadata.",
                  "default": {}
                }
              },
              "required": [
                "id"
              ]
            },
            "maxItems": 100
          }
        },
        "required": [
          "name",
          "model",
          "vectors"
        ]
      },
      "DeleteVectorsParams": {
        "title": "DeleteVectorsParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Vector store name."
          },
          "model": {
            "type": "string",
            "description": "Selected embedding model",
            "enum": [
              "jina-v2",
              "clip"
            ]
          },
          "ids": {
            "type": "array",
            "description": "Document IDs to delete.",
            "items": {
              "type": "string"
            },
            "maxItems": 100
          }
        },
        "required": [
          "name",
          "model",
          "ids"
        ]
      },
      "QueryVectorStoreParams": {
        "title": "QueryVectorStoreParams",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Vector store to query against."
          },
          "model": {
            "type": "string",
            "description": "Selected embedding model",
            "enum": [
              "jina-v2",
              "clip"
            ]
          },
          "query_ids": {
            "type": "array",
            "description": "Document IDs to use for the query.",
            "items": {
              "type": "string"
            }
          },
          "query_image_uris": {
            "type": "array",
            "description": "Image URIs to embed and use for the query.",
            "items": {
              "type": "string"
            }
          },
          "query_vectors": {
            "type": "array",
            "description": "Vector to use for the query.",
            "items": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "query_strings": {
            "type": "array",
            "description": "Text to embed and use for the query.",
            "items": {
              "type": "string"
            }
          },
          "top_k": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 10,
            "description": "Number of results to return."
          },
          "ef_search": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "default": 40,
            "description": "The size of the dynamic candidate list for searching the index graph."
          },
          "include_values": {
            "type": "boolean",
            "default": false,
            "description": "Include the values of the vectors in the response."
          },
          "include_metadata": {
            "type": "boolean",
            "default": false,
            "description": "Include the metadata of the vectors in the response."
          },
          "filters": {
            "type": "object",
            "description": "Filter metadata by key-value pairs."
          }
        },
        "required": [
          "name",
          "model"
        ]
      },
      "VectorStoreQueryResult": {
        "title": "VectorStoreQueryResult",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID."
          },
          "distance": {
            "type": "number",
            "format": "float",
            "description": "Similarity score."
          },
          "vector": {
            "type": "array",
            "description": "Embedding vector.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Document metadata."
          }
        },
        "required": [
          "id",
          "distance"
        ]
      },
      "QueryVectorStoreResponse": {
        "title": "QueryVectorStoreResponse",
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "Query results.",
            "items": {
              "type": "array",
              "items": {
                "title": "VectorStoreQueryResult",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Document ID."
                  },
                  "distance": {
                    "type": "number",
                    "format": "float",
                    "description": "Similarity score."
                  },
                  "vector": {
                    "type": "array",
                    "description": "Embedding vector.",
                    "items": {
                      "type": "number",
                      "format": "float"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Document metadata."
                  }
                },
                "required": [
                  "id",
                  "distance"
                ]
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Vector store name."
          },
          "model": {
            "type": "string",
            "description": "Selected embedding model",
            "enum": [
              "jina-v2",
              "clip"
            ]
          },
          "metric": {
            "type": "string",
            "enum": [
              "cosine",
              "l2",
              "inner"
            ],
            "description": "The distance metric used for the query."
          }
        },
        "required": [
          "results"
        ]
      }
    }
  },
  "paths": {
    "/GenerateText": {
      "post": {
        "summary": "GenerateText",
        "operationId": "GenerateText",
        "tags": [
          "language-generation"
        ],
        "description": "Generate text using a language model.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "GenerateTextIn",
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "description": "Input prompt."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "mistral-7b-instruct"
                  ],
                  "description": "Selected model.",
                  "default": "mistral-7b-instruct"
                },
                "response_format": {
                  "title": "ResponseFormat",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "json_object",
                        "text"
                      ],
                      "description": "Type of response.",
                      "default": "text"
                    },
                    "json_schema": {
                      "type": "object",
                      "description": "JSON schema to guide `json_object` response."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "temperature": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 10,
                  "default": 4,
                  "description": "Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic."
                },
                "max_tokens": {
                  "type": "integer",
                  "description": "Maximum number of tokens to generate.",
                  "default": 800
                }
              },
              "required": [
                "prompt"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GenerateTextOut",
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Text response."
                    },
                    "json_object": {
                      "type": "object",
                      "description": "JSON response."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/MultiGenerateText": {
      "post": {
        "summary": "MultiGenerateText",
        "operationId": "MultiGenerateText",
        "tags": [
          "language-generation"
        ],
        "description": "Generate multiple text choices using a language model.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "MultiGenerateTextIn",
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "description": "Input prompt."
                },
                "num_choices": {
                  "type": "integer",
                  "description": "Number of choices to generate."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "mistral-7b-instruct"
                  ],
                  "description": "Selected model.",
                  "default": "mistral-7b-instruct"
                },
                "response_format": {
                  "title": "ResponseFormat",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "json_object",
                        "text"
                      ],
                      "description": "Type of response.",
                      "default": "text"
                    },
                    "json_schema": {
                      "type": "object",
                      "description": "JSON schema to guide `json_object` response."
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "temperature": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 10,
                  "default": 4,
                  "description": "Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic."
                },
                "max_tokens": {
                  "type": "integer",
                  "description": "Maximum number of tokens to generate.",
                  "default": 800
                }
              },
              "required": [
                "prompt",
                "num_choices"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiGenerateTextOut",
                  "type": "object",
                  "properties": {
                    "choices": {
                      "type": "array",
                      "items": {
                        "title": "GenerateTextOut",
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Text response."
                          },
                          "json_object": {
                            "type": "object",
                            "description": "JSON response."
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "choices"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/GenerateTextVision": {
      "post": {
        "summary": "GenerateTextVision",
        "operationId": "GenerateTextVision",
        "tags": [
          "vision-language-generation"
        ],
        "description": "Generate text by prompting with text and images using a vision-language model.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "GenerateTextVisionIn",
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "description": "Text prompt."
                },
                "image_uris": {
                  "description": "Image prompts.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "firellava-13b"
                  ],
                  "description": "Selected model.",
                  "default": "firellava-13b"
                },
                "temperature": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 10,
                  "default": 4,
                  "description": "Sampling temperature to use. Higher values make the output more random, lower values make the output more deterministic."
                },
                "max_tokens": {
                  "type": "integer",
                  "description": "Maximum number of tokens to generate.",
                  "default": 800
                }
              },
              "required": [
                "prompt",
                "image_uri"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GenerateTextVisionOut",
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Text response."
                    }
                  },
                  "required": [
                    "text"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/GenerateImage": {
      "post": {
        "summary": "GenerateImage",
        "operationId": "GenerateImage",
        "tags": [
          "image-generation"
        ],
        "description": "Generate an image.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "GenerateImageIn",
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "description": "Input prompt."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "stablediffusion-xl",
                    "stablediffusion-1.5"
                  ],
                  "description": "Selected model.",
                  "default": "stablediffusion-xl"
                },
                "negative_prompt": {
                  "type": "string",
                  "description": "Negative input prompt."
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                },
                "width": {
                  "type": "integer",
                  "description": "Width of output image, in pixels."
                },
                "height": {
                  "type": "integer",
                  "description": "Height of output image, in pixels."
                },
                "refinement": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls how long to run the image refinement process.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 6
                },
                "prompt_influence": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls the influence of the input prompt on the generated output.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 2
                },
                "seed": {
                  "type": "integer",
                  "description": "Seed for deterministic generation. Default is a random seed."
                }
              },
              "required": [
                "prompt"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GenerateImageOut",
                  "type": "object",
                  "properties": {
                    "image_uri": {
                      "type": "string",
                      "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                    },
                    "seed": {
                      "type": "integer",
                      "description": "The random noise seed used for generation."
                    }
                  },
                  "required": [
                    "image_uri",
                    "seed"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MultiGenerateImage": {
      "post": {
        "summary": "MultiGenerateImage",
        "operationId": "MultiGenerateImage",
        "tags": [
          "image-generation"
        ],
        "description": "Generate multiple images.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "MultiGenerateImageIn",
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "description": "Input prompt."
                },
                "num_images": {
                  "type": "integer",
                  "description": "Number of images to generate."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "stablediffusion-xl",
                    "stablediffusion-1.5"
                  ],
                  "description": "Selected model.",
                  "default": "stablediffusion-xl"
                },
                "negative_prompt": {
                  "type": "string",
                  "description": "Negative input prompt."
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                },
                "width": {
                  "type": "integer",
                  "description": "Width of output image, in pixels."
                },
                "height": {
                  "type": "integer",
                  "description": "Height of output image, in pixels."
                },
                "refinement": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls how long to run the image refinement process.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 6
                },
                "prompt_influence": {
                  "type": "number",
                  "format": "float",
                  "minimum": 0,
                  "maximum": 10,
                  "description": "Controls the influence of the input prompt on the generated output."
                },
                "seeds": {
                  "description": "Random noise seeds. Default is random seeds for each generation.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              },
              "required": [
                "prompt",
                "num_images"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiGenerateImageOut",
                  "type": "object",
                  "properties": {
                    "outputs": {
                      "type": "array",
                      "items": {
                        "title": "GenerateImageOut",
                        "type": "object",
                        "properties": {
                          "image_uri": {
                            "type": "string",
                            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                          },
                          "seed": {
                            "type": "integer",
                            "description": "The random noise seed used for generation."
                          }
                        },
                        "required": [
                          "image_uri",
                          "seed"
                        ]
                      }
                    }
                  },
                  "required": [
                    "outputs"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ControlledGenerateImage": {
      "post": {
        "summary": "ControlledGenerateImage",
        "operationId": "ControlledGenerateImage",
        "tags": [
          "image-generation"
        ],
        "description": "Generate an image with generation controlled by an input image.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "ControlledGenerateImageIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Input image."
                },
                "control_method": {
                  "type": "string",
                  "enum": [
                    "edge",
                    "upscale",
                    "depth",
                    "qr"
                  ],
                  "description": "Strategy to control generation using the input image."
                },
                "prompt": {
                  "type": "string",
                  "description": "Input prompt."
                },
                "output_resolution": {
                  "type": "integer",
                  "description": "Resolution of the output image, in pixels.",
                  "default": 1024
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "stablediffusion-1.5",
                    "stablediffusion-xl"
                  ],
                  "description": "Selected model.",
                  "default": "stablediffusion-xl"
                },
                "negative_prompt": {
                  "type": "string",
                  "description": "Negative input prompt."
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                },
                "refinement": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls how long to run the image refinement process.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 6
                },
                "image_influence": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls the influence of the input image on the generated output.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 9
                },
                "prompt_influence": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls the influence of the input prompt on the generated output.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 2
                },
                "seed": {
                  "type": "integer",
                  "description": "Seed for deterministic generation. Default is a random seed."
                }
              },
              "required": [
                "image_uri",
                "control_method",
                "prompt"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ControlledGenerateImageOut",
                  "type": "object",
                  "properties": {
                    "image_uri": {
                      "type": "string",
                      "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                    },
                    "seed": {
                      "type": "integer",
                      "description": "The random noise seed used for generation."
                    }
                  },
                  "required": [
                    "image_uri",
                    "seed"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MultiControlledGenerateImage": {
      "post": {
        "summary": "MultiControlledGenerateImage",
        "operationId": "MultiControlledGenerateImage",
        "tags": [
          "image-generation"
        ],
        "description": "Generate multiple image outputs with generation controlled by an input image.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "MultiControlledGenerateImageIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Input image."
                },
                "control_method": {
                  "type": "string",
                  "enum": [
                    "edge",
                    "upscale",
                    "depth",
                    "qr"
                  ],
                  "description": "Strategy to control generation using the input image."
                },
                "prompt": {
                  "type": "string",
                  "description": "Input prompt."
                },
                "num_images": {
                  "type": "integer",
                  "description": "Number of images to generate."
                },
                "output_resolution": {
                  "type": "integer",
                  "description": "Resolution of the output image, in pixels.",
                  "default": 1024
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "stablediffusion-1.5"
                  ],
                  "description": "Selected model.",
                  "default": "stablediffusion-1.5"
                },
                "negative_prompt": {
                  "type": "string",
                  "description": "Negative input prompt."
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                },
                "refinement": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls how long to run the image refinement process.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 6
                },
                "image_influence": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls the influence of the input image on the generated output.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 9
                },
                "prompt_influence": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls the influence of the input prompt on the generated output.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 2
                },
                "seeds": {
                  "description": "Random noise seeds. Default is random seeds for each generation.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              },
              "required": [
                "image_uri",
                "control_method",
                "prompt",
                "num_images"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiControlledGenerateImageOut",
                  "type": "object",
                  "properties": {
                    "outputs": {
                      "type": "array",
                      "items": {
                        "title": "ControlledGenerateImageOut",
                        "type": "object",
                        "properties": {
                          "image_uri": {
                            "type": "string",
                            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                          },
                          "seed": {
                            "type": "integer",
                            "description": "The random noise seed used for generation."
                          }
                        },
                        "required": [
                          "image_uri",
                          "seed"
                        ]
                      }
                    }
                  },
                  "required": [
                    "outputs"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/GenerativeEditImage": {
      "post": {
        "summary": "GenerativeEditImage",
        "operationId": "GenerativeEditImage",
        "tags": [
          "image-generation"
        ],
        "description": "Edit an image with a generative model.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "GenerativeEditImageIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Input image."
                },
                "mask_image_uri": {
                  "type": "string",
                  "description": "Mask image that controls which pixels are inpainted. If unset, the entire image is edited (image-to-image)."
                },
                "prompt": {
                  "type": "string",
                  "description": "Input prompt."
                },
                "output_resolution": {
                  "type": "integer",
                  "description": "Resolution of the output image, in pixels.",
                  "default": 1024
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "stablediffusion-xl"
                  ],
                  "description": "Selected model.",
                  "default": "stablediffusion-xl"
                },
                "negative_prompt": {
                  "type": "string",
                  "description": "Negative input prompt."
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                },
                "refinement": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls how long to run the image refinement process.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 6
                },
                "prompt_influence": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls the influence of the input prompt on the generated output.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 5
                },
                "seed": {
                  "type": "integer",
                  "description": "Seed for deterministic generation. Default is a random seed."
                }
              },
              "required": [
                "image_uri",
                "prompt"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GenerativeEditImageOut",
                  "type": "object",
                  "properties": {
                    "image_uri": {
                      "type": "string",
                      "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                    },
                    "seed": {
                      "type": "integer",
                      "description": "The random noise seed used for generation."
                    }
                  },
                  "required": [
                    "image_uri",
                    "seed"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MultiGenerativeEditImage": {
      "post": {
        "summary": "MultiGenerativeEditImage",
        "operationId": "MultiGenerativeEditImage",
        "tags": [
          "image-generation"
        ],
        "description": "Generate multiple image outputs modifying part of an image using a mask.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "MultiGenerativeEditImageIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Input image."
                },
                "mask_image_uri": {
                  "type": "string",
                  "description": "Mask image that controls which pixels are edited (inpainting). If unset, the entire image is edited (image-to-image)."
                },
                "prompt": {
                  "type": "string",
                  "description": "Input prompt."
                },
                "num_images": {
                  "type": "integer",
                  "description": "Number of images to generate."
                },
                "output_resolution": {
                  "type": "integer",
                  "description": "Resolution of the output image, in pixels.",
                  "default": 1024
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "stablediffusion-1.5"
                  ],
                  "description": "Selected model.",
                  "default": "stablediffusion-1.5"
                },
                "negative_prompt": {
                  "type": "string",
                  "description": "Negative input prompt."
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                },
                "refinement": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls how long to run the image refinement process.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 6
                },
                "image_influence": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls the influence of the input image on the generated output.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 9
                },
                "prompt_influence": {
                  "type": "number",
                  "format": "float",
                  "description": "Controls the influence of the input prompt on the generated output.",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 2
                },
                "seeds": {
                  "description": "Random noise seeds. Default is random seeds for each generation.",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              },
              "required": [
                "image_uri",
                "prompt",
                "num_images"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiGenerativeEditImageOut",
                  "type": "object",
                  "properties": {
                    "outputs": {
                      "type": "array",
                      "items": {
                        "title": "GenerativeEditImageOut",
                        "type": "object",
                        "properties": {
                          "image_uri": {
                            "type": "string",
                            "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                          },
                          "seed": {
                            "type": "integer",
                            "description": "The random noise seed used for generation."
                          }
                        },
                        "required": [
                          "image_uri",
                          "seed"
                        ]
                      }
                    }
                  },
                  "required": [
                    "outputs"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/FillMask": {
      "post": {
        "summary": "FillMask",
        "operationId": "FillMask",
        "tags": [
          "image-generation"
        ],
        "description": "Edit an image with a generative model.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "FillMaskIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Input image."
                },
                "mask_image_uri": {
                  "type": "string",
                  "description": "Mask image that controls which pixels are inpainted."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "big-lama"
                  ],
                  "description": "Selected model.",
                  "default": "big-lama"
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                }
              },
              "required": [
                "image_uri",
                "mask_image_uri"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "FillMaskOut",
                  "type": "object",
                  "properties": {
                    "image_uri": {
                      "type": "string",
                      "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                    }
                  },
                  "required": [
                    "image_uri"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/UpscaleImage": {
      "post": {
        "summary": "UpscaleImage",
        "operationId": "UpscaleImage",
        "tags": [
          "image-utilities"
        ],
        "description": "Upscale an image.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "UpscaleImageIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Input image."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "real-esrgan-x4"
                  ],
                  "description": "Selected model.",
                  "default": "real-esrgan-x4"
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                }
              },
              "required": [
                "image_uri"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "UpscaleImageOut",
                  "type": "object",
                  "properties": {
                    "image_uri": {
                      "type": "string",
                      "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                    }
                  },
                  "required": [
                    "image_uri"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/RemoveBackground": {
      "post": {
        "summary": "RemoveBackground",
        "operationId": "RemoveBackground",
        "tags": [
          "image-utilities"
        ],
        "description": "Remove the background from an image, with the option to return the foreground as a mask.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "RemoveBackgroundIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Input image."
                },
                "return_mask": {
                  "type": "boolean",
                  "description": "Return a mask image instead of the original content."
                },
                "background_color": {
                  "type": "string",
                  "description": "Hex value background color. Transparent if unset."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "isnet"
                  ],
                  "description": "Selected model.",
                  "default": "isnet"
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                }
              },
              "required": [
                "image_uri"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "RemoveBackgroundOut",
                  "type": "object",
                  "properties": {
                    "image_uri": {
                      "type": "string",
                      "description": "Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                    }
                  },
                  "required": [
                    "image_uri"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/DetectSegment": {
      "post": {
        "summary": "DetectSegment",
        "operationId": "DetectSegment",
        "tags": [
          "object-detection"
        ],
        "description": "Detect a segment in an image.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "DetectSegmentIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Input image."
                },
                "point_prompt": {
                  "title": "Point",
                  "type": "object",
                  "properties": {
                    "x": {
                      "type": "integer",
                      "description": "X position."
                    },
                    "y": {
                      "type": "integer",
                      "description": "Y position."
                    }
                  },
                  "required": [
                    "x",
                    "y"
                  ]
                },
                "box_prompt": {
                  "title": "BoundingBox",
                  "type": "object",
                  "properties": {
                    "x1": {
                      "type": "number",
                      "format": "float",
                      "description": "Top left corner x."
                    },
                    "y1": {
                      "type": "number",
                      "format": "float",
                      "description": "Top left corner y."
                    },
                    "x2": {
                      "type": "number",
                      "format": "float",
                      "description": "Bottom right corner x."
                    },
                    "y2": {
                      "type": "number",
                      "format": "float",
                      "description": "Bottom right corner y."
                    }
                  },
                  "required": [
                    "x1",
                    "y1",
                    "x2",
                    "y2"
                  ]
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an image URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the image data will be returned as a base64-encoded string."
                }
              },
              "required": [
                "image_uri"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "DetectSegmentOut",
                  "type": "object",
                  "properties": {
                    "mask_image_uri": {
                      "type": "string",
                      "description": "Detected segment in 'mask image' format. Base 64-encoded JPEG image bytes, or a hosted image url if `store` is provided."
                    }
                  },
                  "required": [
                    "box",
                    "path"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/TranscribeMedia": {
      "post": {
        "summary": "TranscribeMedia",
        "operationId": "TranscribeMedia",
        "tags": [
          "audio-recognition"
        ],
        "description": "Transcribe speech in an audio or video file.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "TranscribeMediaIn",
              "type": "object",
              "properties": {
                "audio_uri": {
                  "type": "string",
                  "description": "Input audio."
                },
                "prompt": {
                  "type": "string",
                  "description": "Prompt to guide model on the content and context of input audio."
                },
                "language": {
                  "type": "string",
                  "default": "en",
                  "description": "Language of input audio in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes) format."
                },
                "segment": {
                  "type": "boolean",
                  "default": false,
                  "description": "Segment the text into sentences with approximate timestamps."
                },
                "align": {
                  "type": "boolean",
                  "default": false,
                  "description": "Align transcription to produce more accurate sentence-level timestamps and word-level timestamps. An array of word segments will be included in each sentence segment."
                },
                "diarize": {
                  "type": "boolean",
                  "default": false,
                  "description": "Identify speakers for each segment. Speaker IDs will be included in each segment."
                },
                "suggest_chapters": {
                  "type": "boolean",
                  "default": false,
                  "description": "Suggest automatic chapter markers."
                }
              },
              "required": [
                "audio_uri"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "TranscribeMediaOut",
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Transcribed text."
                    },
                    "segments": {
                      "type": "array",
                      "description": "Transcribed segments, if `segment` is enabled.",
                      "items": {
                        "title": "TranscribedSegment",
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Text of segment."
                          },
                          "start": {
                            "type": "number",
                            "format": "float",
                            "description": "Start time of segment, in seconds."
                          },
                          "end": {
                            "type": "number",
                            "format": "float",
                            "description": "End time of segment, in seconds."
                          },
                          "speaker": {
                            "type": "string",
                            "description": "ID of speaker, if `diarize` is enabled."
                          },
                          "words": {
                            "type": "array",
                            "description": "Aligned words, if `align` is enabled.",
                            "items": {
                              "title": "TranscribedWord",
                              "type": "object",
                              "properties": {
                                "word": {
                                  "type": "string",
                                  "description": "Text of word."
                                },
                                "start": {
                                  "type": "number",
                                  "format": "float",
                                  "description": "Start time of word, in seconds."
                                },
                                "end": {
                                  "type": "number",
                                  "format": "float",
                                  "description": "End time of word, in seconds."
                                },
                                "speaker": {
                                  "type": "string",
                                  "description": "ID of speaker, if `diarize` is enabled."
                                }
                              },
                              "required": [
                                "word"
                              ]
                            }
                          }
                        },
                        "required": [
                          "text",
                          "start",
                          "end"
                        ]
                      }
                    },
                    "chapters": {
                      "type": "array",
                      "description": "Chapter markers, if `suggest_chapters` is enabled.",
                      "items": {
                        "title": "ChapterMarker",
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Chapter title."
                          },
                          "start": {
                            "type": "number",
                            "format": "float",
                            "description": "Start time of chapter, in seconds."
                          }
                        },
                        "required": [
                          "title",
                          "start"
                        ]
                      }
                    }
                  },
                  "required": [
                    "text"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/GenerateSpeech": {
      "post": {
        "summary": "GenerateSpeech",
        "operationId": "GenerateSpeech",
        "tags": [
          "audio-generation"
        ],
        "description": "Generate speech from text.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "GenerateSpeechIn",
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Input text."
                },
                "audio_uri": {
                  "type": "string",
                  "description": "Reference audio used to synthesize the speaker. If unset, a default speaker voice will be used."
                },
                "language": {
                  "type": "string",
                  "default": "en",
                  "description": "Language of input text. Supported languages: `en, de, fr, es, it, pt, pl, zh, ar, cs, ru, nl, tr, hu, ko`."
                },
                "store": {
                  "type": "string",
                  "description": "Use \"hosted\" to return an audio URL hosted on Substrate. You can also provide a URL to a registered [file store](/docs/file-stores). If unset, the audio data will be returned as a base64-encoded string."
                }
              },
              "required": [
                "text"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GenerateSpeechOut",
                  "type": "object",
                  "properties": {
                    "audio_uri": {
                      "type": "string",
                      "description": "Base 64-encoded WAV audio bytes, or a hosted audio url if `store` is provided."
                    }
                  },
                  "required": [
                    "audio_uri"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/EmbedText": {
      "post": {
        "summary": "EmbedText",
        "operationId": "EmbedText",
        "tags": [
          "semantic-space"
        ],
        "description": "Generate vector embedding for a text document.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "EmbedTextIn",
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Text to embed."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "jina-v2",
                    "clip"
                  ],
                  "description": "Selected model.",
                  "default": "jina-v2"
                },
                "store": {
                  "type": "string",
                  "description": "[Vector store](/docs/vector-stores) identifier."
                },
                "metadata": {
                  "type": "object",
                  "description": "Metadata that can be used to query the vector store. Ignored if `store` is unset."
                },
                "embedded_metadata": {
                  "type": "object",
                  "properties": {
                    "include_keys": {
                      "type": "array",
                      "description": "Keys to embed with text.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "exclude_keys": {
                      "type": "array",
                      "description": "Keys to exclude. All other keys will be embedded with text.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": [
                "text"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "EmbedTextOut",
                  "type": "object",
                  "properties": {
                    "embedding": {
                      "title": "Embedding",
                      "type": "object",
                      "properties": {
                        "vector": {
                          "type": "string",
                          "description": "Embedding vector.",
                          "items": {
                            "type": "number",
                            "format": "float"
                          }
                        }
                      },
                      "required": [
                        "vector"
                      ]
                    }
                  },
                  "required": [
                    "embedding"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MultiEmbedText": {
      "post": {
        "summary": "MultiEmbedText",
        "operationId": "MultiEmbedText",
        "tags": [
          "semantic-space"
        ],
        "description": "Generate vector embeddings for multiple text documents.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "MultiEmbedTextIn",
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "Items to embed.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Text to embed."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Metadata that can be used to query the vector store. Ignored if `store` is unset."
                      }
                    },
                    "required": [
                      "text"
                    ]
                  }
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "jina-v2",
                    "clip"
                  ],
                  "description": "Selected model.",
                  "default": "jina-v2"
                },
                "store": {
                  "type": "string",
                  "description": "[Vector store](/docs/vector-stores) identifier."
                },
                "embedded_metadata": {
                  "type": "object",
                  "properties": {
                    "include_keys": {
                      "type": "array",
                      "description": "Keys to embed with text.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "exclude_keys": {
                      "type": "array",
                      "description": "Keys to exclude. All other keys will be embedded with text.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEmbedTextOut",
                  "type": "object",
                  "properties": {
                    "embeddings": {
                      "type": "array",
                      "description": "Generated embeddings.",
                      "items": {
                        "title": "Embedding",
                        "type": "object",
                        "properties": {
                          "vector": {
                            "type": "string",
                            "description": "Embedding vector.",
                            "items": {
                              "type": "number",
                              "format": "float"
                            }
                          }
                        },
                        "required": [
                          "vector"
                        ]
                      }
                    }
                  },
                  "required": [
                    "embeddings"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/EmbedImage": {
      "post": {
        "summary": "EmbedImage",
        "operationId": "EmbedImage",
        "tags": [
          "semantic-space"
        ],
        "description": "Generate vector embedding for an image, and optionally store the embedding.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "EmbedImageIn",
              "type": "object",
              "properties": {
                "image_uri": {
                  "type": "string",
                  "description": "Image to embed."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "clip"
                  ],
                  "description": "Selected model.",
                  "default": "clip"
                },
                "store": {
                  "type": "string",
                  "description": "[Vector store](/docs/vector-stores) identifier."
                }
              },
              "required": [
                "image_uri"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "EmbedImageOut",
                  "type": "object",
                  "properties": {
                    "embedding": {
                      "title": "Embedding",
                      "type": "object",
                      "properties": {
                        "vector": {
                          "type": "string",
                          "description": "Embedding vector.",
                          "items": {
                            "type": "number",
                            "format": "float"
                          }
                        }
                      },
                      "required": [
                        "vector"
                      ]
                    }
                  },
                  "required": [
                    "embedding"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/MultiEmbedImage": {
      "post": {
        "summary": "MultiEmbedImage",
        "operationId": "MultiEmbedImage",
        "tags": [
          "semantic-space"
        ],
        "description": "Generate vector embeddings for multiple images, and optionally store the embeddings.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "MultiEmbedImageIn",
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "description": "Items to embed.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "image_uri": {
                        "type": "string",
                        "description": "Image to embed."
                      }
                    },
                    "required": [
                      "image_uri"
                    ]
                  }
                },
                "store": {
                  "type": "string",
                  "description": "[Vector store](/docs/vector-stores) identifier."
                },
                "model": {
                  "type": "string",
                  "enum": [
                    "clip"
                  ],
                  "description": "Selected model.",
                  "default": "clip"
                }
              },
              "required": [
                "items"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "MultiEmbedImageOut",
                  "type": "object",
                  "properties": {
                    "embeddings": {
                      "type": "array",
                      "description": "Generated embeddings.",
                      "items": {
                        "title": "Embedding",
                        "type": "object",
                        "properties": {
                          "vector": {
                            "type": "string",
                            "description": "Embedding vector.",
                            "items": {
                              "type": "number",
                              "format": "float"
                            }
                          }
                        },
                        "required": [
                          "vector"
                        ]
                      }
                    }
                  },
                  "required": [
                    "embeddings"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/vector-stores/create": {
      "post": {
        "tags": [
          "rest-api"
        ],
        "summary": "/vector-stores/create",
        "operationId": "CreateVectorStore",
        "description": "Create a vector store for storing and querying embeddings.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "VectorStoreParams",
              "description": "Fields describing a vector store and its associated index.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Vector store name.",
                  "minLength": 1,
                  "maxLength": 63
                },
                "model": {
                  "type": "string",
                  "description": "Selected embedding model",
                  "enum": [
                    "jina-v2",
                    "clip"
                  ]
                },
                "m": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 64,
                  "default": 16,
                  "description": "The max number of connections per layer for the index."
                },
                "ef_construction": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 128,
                  "description": "The size of the dynamic candidate list for constructing the index graph.",
                  "default": 64
                },
                "metric": {
                  "type": "string",
                  "enum": [
                    "cosine",
                    "l2",
                    "inner"
                  ],
                  "default": "inner",
                  "description": "The distance metric to construct the index with."
                }
              },
              "required": [
                "name",
                "model"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Vector store created.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VectorStoreParams",
                  "description": "Fields describing a vector store and its associated index.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Vector store name.",
                      "minLength": 1,
                      "maxLength": 63
                    },
                    "model": {
                      "type": "string",
                      "description": "Selected embedding model",
                      "enum": [
                        "jina-v2",
                        "clip"
                      ]
                    },
                    "m": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 64,
                      "default": 16,
                      "description": "The max number of connections per layer for the index."
                    },
                    "ef_construction": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 128,
                      "description": "The size of the dynamic candidate list for constructing the index graph.",
                      "default": 64
                    },
                    "metric": {
                      "type": "string",
                      "enum": [
                        "cosine",
                        "l2",
                        "inner"
                      ],
                      "default": "inner",
                      "description": "The distance metric to construct the index with."
                    }
                  },
                  "required": [
                    "name",
                    "model"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/vector-stores/list": {
      "get": {
        "tags": [
          "rest-api"
        ],
        "summary": "/vector-stores/list",
        "operationId": "ListVectorStores",
        "description": "List all vector stores.",
        "responses": {
          "200": {
            "description": "List of vector stores.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "title": "VectorStoreParams",
                    "description": "Fields describing a vector store and its associated index.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Vector store name.",
                        "minLength": 1,
                        "maxLength": 63
                      },
                      "model": {
                        "type": "string",
                        "description": "Selected embedding model",
                        "enum": [
                          "jina-v2",
                          "clip"
                        ]
                      },
                      "m": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 64,
                        "default": 16,
                        "description": "The max number of connections per layer for the index."
                      },
                      "ef_construction": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 128,
                        "description": "The size of the dynamic candidate list for constructing the index graph.",
                        "default": 64
                      },
                      "metric": {
                        "type": "string",
                        "enum": [
                          "cosine",
                          "l2",
                          "inner"
                        ],
                        "default": "inner",
                        "description": "The distance metric to construct the index with."
                      }
                    },
                    "required": [
                      "name",
                      "model"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vector-stores/delete": {
      "post": {
        "tags": [
          "rest-api"
        ],
        "summary": "/vector-stores/delete",
        "operationId": "DeleteVectorStore",
        "description": "Delete a vector store.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "DeleteVectorStoreParams",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Vector store name."
                },
                "model": {
                  "type": "string",
                  "description": "Selected embedding model",
                  "enum": [
                    "jina-v2",
                    "clip"
                  ]
                }
              },
              "required": [
                "name",
                "model"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vector store deleted."
          }
        }
      }
    },
    "/vector-stores/query": {
      "post": {
        "tags": [
          "rest-api"
        ],
        "summary": "/vector-stores/query",
        "operationId": "QueryVectorStore",
        "description": "Query a vector store for similar vectors.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "QueryVectorStoreParams",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Vector store to query against."
                },
                "model": {
                  "type": "string",
                  "description": "Selected embedding model",
                  "enum": [
                    "jina-v2",
                    "clip"
                  ]
                },
                "query_ids": {
                  "type": "array",
                  "description": "Document IDs to use for the query.",
                  "items": {
                    "type": "string"
                  }
                },
                "query_image_uris": {
                  "type": "array",
                  "description": "Image URIs to embed and use for the query.",
                  "items": {
                    "type": "string"
                  }
                },
                "query_vectors": {
                  "type": "array",
                  "description": "Vector to use for the query.",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "format": "float"
                    }
                  }
                },
                "query_strings": {
                  "type": "array",
                  "description": "Text to embed and use for the query.",
                  "items": {
                    "type": "string"
                  }
                },
                "top_k": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": 10,
                  "description": "Number of results to return."
                },
                "ef_search": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": 40,
                  "description": "The size of the dynamic candidate list for searching the index graph."
                },
                "include_values": {
                  "type": "boolean",
                  "default": false,
                  "description": "Include the values of the vectors in the response."
                },
                "include_metadata": {
                  "type": "boolean",
                  "default": false,
                  "description": "Include the metadata of the vectors in the response."
                },
                "filters": {
                  "type": "object",
                  "description": "Filter metadata by key-value pairs."
                }
              },
              "required": [
                "name",
                "model"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Query results.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "QueryVectorStoreResponse",
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "description": "Query results.",
                      "items": {
                        "type": "array",
                        "items": {
                          "title": "VectorStoreQueryResult",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Document ID."
                            },
                            "distance": {
                              "type": "number",
                              "format": "float",
                              "description": "Similarity score."
                            },
                            "vector": {
                              "type": "array",
                              "description": "Embedding vector.",
                              "items": {
                                "type": "number",
                                "format": "float"
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Document metadata."
                            }
                          },
                          "required": [
                            "id",
                            "distance"
                          ]
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "description": "Vector store name."
                    },
                    "model": {
                      "type": "string",
                      "description": "Selected embedding model",
                      "enum": [
                        "jina-v2",
                        "clip"
                      ]
                    },
                    "metric": {
                      "type": "string",
                      "enum": [
                        "cosine",
                        "l2",
                        "inner"
                      ],
                      "description": "The distance metric used for the query."
                    }
                  },
                  "required": [
                    "results"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/vectors/fetch": {
      "post": {
        "tags": [
          "rest-api"
        ],
        "summary": "Fetch vectors",
        "operationId": "FetchVectors",
        "description": "Fetch vectors from a vector store.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "GetVectorsParams",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Vector store name."
                },
                "model": {
                  "type": "string",
                  "description": "Selected embedding model",
                  "enum": [
                    "jina-v2",
                    "clip"
                  ]
                },
                "ids": {
                  "type": "array",
                  "description": "Document IDs to retrieve.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 100
                }
              },
              "required": [
                "name",
                "model",
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vector data.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetVectorsResponse",
                  "type": "object",
                  "properties": {
                    "vectors": {
                      "type": "array",
                      "description": "Retrieved vectors.",
                      "items": {
                        "title": "Vector",
                        "type": "object",
                        "description": "Canonical representation of document with embedding vector.",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Document ID."
                          },
                          "vector": {
                            "type": "array",
                            "description": "Embedding vector.",
                            "items": {
                              "type": "number",
                              "format": "float"
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Document metadata.",
                            "default": {}
                          }
                        },
                        "required": [
                          "id",
                          "vector",
                          "metadata"
                        ]
                      }
                    }
                  },
                  "required": [
                    "vectors"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/vectors/update": {
      "post": {
        "tags": [
          "rest-api"
        ],
        "summary": "Update vectors",
        "operationId": "UpdateVectors",
        "description": "Update vectors in a vector store.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "UpdateVectorsParams",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Vector store name."
                },
                "model": {
                  "type": "string",
                  "description": "Selected embedding model",
                  "enum": [
                    "jina-v2",
                    "clip"
                  ]
                },
                "vectors": {
                  "type": "array",
                  "description": "Vectors to upsert.",
                  "items": {
                    "title": "UpdateVectorParams",
                    "description": "Document to update.",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Document ID."
                      },
                      "vector": {
                        "type": "array",
                        "description": "Embedding vector.",
                        "items": {
                          "type": "number",
                          "format": "float"
                        }
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Document metadata.",
                        "default": {}
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "maxItems": 100
                }
              },
              "required": [
                "name",
                "model",
                "vectors"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of updated vectors.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VectorUpdateCountResponse",
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Number of vectors modified."
                    }
                  },
                  "required": [
                    "count"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/vectors/delete": {
      "post": {
        "tags": [
          "rest-api"
        ],
        "summary": "Delete vectors",
        "operationId": "DeleteVectors",
        "description": "Delete vectors in a vector store.",
        "parameters": [
          {
            "in": "query",
            "schema": {
              "title": "DeleteVectorsParams",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Vector store name."
                },
                "model": {
                  "type": "string",
                  "description": "Selected embedding model",
                  "enum": [
                    "jina-v2",
                    "clip"
                  ]
                },
                "ids": {
                  "type": "array",
                  "description": "Document IDs to delete.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 100
                }
              },
              "required": [
                "name",
                "model",
                "ids"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of deleted vectors.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "VectorUpdateCountResponse",
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "Number of vectors modified."
                    }
                  },
                  "required": [
                    "count"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "language-generation",
      "description": "Language Generation"
    },
    {
      "name": "vision-language-generation",
      "description": "Vision Language Generation"
    },
    {
      "name": "image-generation",
      "description": "Image Generation"
    },
    {
      "name": "object-detection",
      "description": "Object Detection"
    },
    {
      "name": "image-utilities",
      "description": "Image Utilities"
    },
    {
      "name": "audio-recognition",
      "description": "Audio Recognition"
    },
    {
      "name": "audio-generation",
      "description": "Audio Generation"
    },
    {
      "name": "semantic-space",
      "description": "Semantic Space"
    },
    {
      "name": "rest-api",
      "description": "Standalone REST APIs"
    }
  ]
}
